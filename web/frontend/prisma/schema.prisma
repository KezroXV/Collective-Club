// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  shopId    String?
  shopDomain String? @unique  // ✅ Ajouter @unique ici
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts     Post[]
  comments  Comment[]
  reactions Reaction[]

  @@map("users")
  PollVote PollVote[]
}

model Post {
  id        String     @id @default(cuid())
  title     String
  content   String
  imageUrl  String?
  category  String?
  isPinned  Boolean    @default(false)
  status    PostStatus @default(PUBLISHED)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  comments  Comment[]
  reactions Reaction[]
  poll      Poll?     // ✅ NOUVEAU - Sondage optionnel

  @@map("posts")
}

// ✅ NOUVEAU MODÈLE
model Poll {
  id       String @id @default(cuid())
  question String
  
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String @unique
  
  options PollOption[]
  votes   PollVote[]
  
  createdAt DateTime @default(now())
  
  @@map("polls")
}

// ✅ OPTIONS DU SONDAGE
model PollOption {
  id    String @id @default(cuid())
  text  String
  order Int    // 0, 1, 2, 3 (max 4 options)
  
  poll   Poll @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId String
  
  votes PollVote[]
  
  @@map("poll_options")
}

// ✅ VOTES DES UTILISATEURS
model PollVote {
  id String @id @default(cuid())
  
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  
  poll   Poll @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId String
  
  option   PollOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  optionId String
  
  createdAt DateTime @default(now())
  
  @@unique([userId, pollId]) // Un vote par user par sondage
  @@map("poll_votes")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  reactions Reaction[]

  @@map("comments")
}

model Reaction {
  id        String       @id @default(cuid())
  type      ReactionType
  createdAt DateTime     @default(now())

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@unique([userId, commentId])
  @@map("reactions")
}

enum Role {
  ADMIN
  MODERATOR
  MEMBER
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ReactionType {
  LIKE
  LOVE
  LAUGH
  WOW
  APPLAUSE
}